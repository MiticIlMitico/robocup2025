import time
import PicoRobotics
import pimoroni_i2c
import breakout_vl53l5cx

# -------------------------------------------------------------------------
# Funzioni compatibili con ulab.numpy
# -------------------------------------------------------------------------

# Funzione reduce per fare operazioni cumulative (come somma o prodotto)
def reduce(func, iterable, initializer=None):
    it = iter(iterable)
    if initializer is None:
        value = next(it)
    else:
        value = initializer
    for element in it:
        value = func(value, element)
    return value

# Funzione reshape per trasformare una lista 1D in matrice 2D (es: 64 -> 8x8)
def reshape(arr, shape):
    """
    Reshape the given array to the given shape.

    :param arr: The input array.
    :param shape: The desired shape.
    :return: The reshaped array.
    """
    # Calculate the total number of elements in the input array
    total_elements = reduce(lambda x, y: x * y, shape)
    
    # If the input array has fewer elements than the desired shape,
    # pad the input array with zeros
    if len(arr) < total_elements:
        arr += [0] * (total_elements - len(arr))
        
    # If the input array has more elements than the desired shape,
    # truncate the input array
    arr = arr[:total_elements]
    
    # Reshape the input array to the desired shape
    new_arr = []
    for i in range(shape[0]):
        start_index = i * shape[1]
        end_index = start_index + shape[1]
        new_arr.append(arr[start_index:end_index])
    return new_arr

# Funzione flip per invertire righe o colonne della matrice
def flip(arr, axis):
    """
    Flip the given array along the given axis.

    :param arr: The input array.
    :param axis: The axis along which to flip the array.
    :return: The flipped array.
    """
    # Check that the given axis is valid
    #if axis >= len(arr.shape):
    #    raise ValueError("Invalid axis: {}".format(axis))

    # Flip the array along the given axis
    if axis == 0:
        return arr[::-1]  # inverte le righe
    elif axis == 1:
        return [row[::-1] for row in arr]  # inverte le colonne
    else:
        raise ValueError("Invalid axis: {}".format(axis))

# Funzione clamp per limitare un valore tra un minimo e un massimo
def clamp(val, min_val, max_val):
    return max(min_val, min(max_val, val))

# -------------------------------------------------------------------------
# Costanti di configurazione
# -------------------------------------------------------------------------


# The VL53L5CX requires a firmware blob to start up.
# Make sure you upload "vl53l5cx_firmware.bin" via Thonny to the root of your filesystem
# You can find it here: https://github.com/ST-mirror/VL53L5CX_ULD_driver/blob/no-fw/lite/en/vl53l5cx_firmware.bin

# This example attempts to track a "bright" object (such as a white business card).
# It uses reflectance to identify the target and compute the X/Y coordinates
# of its "center of mass" in the sensors view.
# We then use the object tracking to drive a little robot towards a business card onna stick!

# Motion indication only works at distances > 400mm so it's not
# really useful as a method to reject data.

# Configure your distance and brightness thresholds to suit your object
DISTANCE_THRESHOLD = 3000  # Distanza massima accettabile in mm
REFLECTANCE_THRESHOLD = 90  # Riflettanza minima accettabile in %

# Speed / distance constants for the robot - modify these to change driving behaviour!
DRIVING_SPEED = 0.7         # Velocità di avanzamento base del robot
TURNING_SPEED = 1.8         # Fattore di correzione laterale (rotazione)
GOAL_DISTANCE = 100.0       # Distanza desiderata dall'oggetto in mm
SPEED_RANGE = 80.0          # Gamma di distanza per il calcolo della velocità


# Setup the left and right motors - we're connecting our motors via a Motor SHIM for Pico.
# Swap the directions if this is different to your setup
#left = Motor(pico_motor_shim.MOTOR_1, direction=REVERSED_DIR)
#right = Motor(pico_motor_shim.MOTOR_2, direction=NORMAL_DIR)

# -------------------------------------------------------------------------
# Inizializzazione I2C
# -------------------------------------------------------------------------

PINS_BREAKOUT_GARDEN = {"sda": 6, "scl": 7}
# Sensor startup time is proportional to i2c baudrate
# HOWEVER many sensors may not run at > 400KHz (400000)
i2c = pimoroni_i2c.PimoroniI2C(**PINS_BREAKOUT_GARDEN, baudrate=2_000_000)

# -------------------------------------------------------------------------
# Inizializzazione motori (test iniziale)
# -------------------------------------------------------------------------

board = PicoRobotics.KitronikPicoRobotics(i2c)
board.motorOn(1, "r", 10)  # ruota sinistra indietro
board.motorOn(2, "f", 10)  # ruota destra avanti
time.sleep(1)   # Frequenza di aggiornamento PID            # attiva per 1 secondo
board.motorOff(1)
board.motorOff(2)

# -------------------------------------------------------------------------
# Inizializzazione sensore VL53L5CX
# -------------------------------------------------------------------------

print("Starting up sensor...")
t_sta = time.ticks_ms()
sensor = breakout_vl53l5cx.VL53L5CX(i2c)
t_end = time.ticks_ms()
print("Done in {}ms...".format(t_end - t_sta))

# Impostazioni del sensore
sensor.set_resolution(breakout_vl53l5cx.RESOLUTION_8X8)
sensor.set_ranging_frequency_hz(15)
sensor.start_ranging()

# -------------------------------------------------------------------------
# Ciclo principale di tracking e controllo motori
# -------------------------------------------------------------------------

while True:
    time.sleep(1.0 / 60)  # Frequenza di aggiornamento ~60Hz

    if sensor.data_ready():
        # "data" is a namedtuple (attrtuple technically)
        # it includes average readings as "distance_avg" and "reflectance_avg"
        # plus a full 4x4 or 8x8 set of readings (as a 1d tuple) for both values.
        data = sensor.get_data()
        
        #reflectance = numpy.array(data.reflectance).reshape((8, 8))
        #distance = numpy.array(data.distance).reshape((8, 8))

        # Converti le tuple di valori in matrici 8x8
        reflectance = reshape(list(data.reflectance), (8, 8))
        distance = reshape(list(data.distance), (8, 8))

        scalar = 0  # Somma pesi di riflettanza validi
        target_distance = 0
        n_distances = 0

        # Filtro: elimina i punti troppo lontani o poco riflettenti
        for ox in range(8):
            for oy in range(8):
                d = distance[ox][oy]
                r = reflectance[ox][oy]
                if d > DISTANCE_THRESHOLD or r < REFLECTANCE_THRESHOLD:
                    reflectance[ox][oy] = 0
                else:
                    scalar += r

        # Calcolo della distanza media dei punti validi
        for ox in range(8):
            for oy in range(8):
                d = distance[ox][oy]
                r = reflectance[ox][oy]
                if r > 0:
                    target_distance += d
                    n_distances += 1

        if n_distances > 0:
            target_distance /= n_distances
        else:
            target_distance = 0

        # Il sensore è montato al contrario, bisogna ribaltare la matrice
        reflectance = flip(reflectance, axis=0)

        # Calcolo centro di massa dell'oggetto (X,Y)
        x = 0
        y = 0

        if scalar > 0:
            for ox in range(8):
                for oy in range(8):
                    y += reflectance[ox][oy] * ox
                    x += reflectance[ox][oy] * oy

            x = (x / scalar) / 3.5 - 1.0
            y = (y / scalar) / 3.5 - 1.0

            # Calcolo velocità in base alla distanza target
            scale = (target_distance - GOAL_DISTANCE) / SPEED_RANGE
            spd = clamp(scale, -1.0, 1.0) * DRIVING_SPEED

            # Calcolo velocità per le due ruote con correzione laterale
            left_speed = int(clamp((spd - (x * TURNING_SPEED)) * 30, 0, 100))
            right_speed = int(clamp((spd + (x * TURNING_SPEED)) * 30, 0, 100))

            print("x={:.2f}, y={:.2f}, d={:.1f}, L={}, R={}".format(x, y, target_distance, left_speed, right_speed))

            # Comando ai motori
            board.motorOn(1, "f", left_speed)
            board.motorOn(2, "f", right_speed)
        else:
            # Se l’oggetto non viene visto, ferma i motori
            board.motorOff(1)
            board.motorOff(2)