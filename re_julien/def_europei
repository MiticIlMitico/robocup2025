#include <Wire.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>

Adafruit_BNO055 bno = Adafruit_BNO055(55);

// Motori
const int AIN1 = 2, AIN2 = 3, PWMA = 5;

const int BIN1 = 7, BIN2 = 7, PWMB = 6;
const int STBY = 5;

// Parametri robot
const float distanzaRuote = 0.2; // 20 cm tra le ruote
const float raggio_cerchio = 1.5; // Raggio desiderato in metri

// PID
float Kp = 2.0;
float Ki = 0.0;
float Kd = 0.3;

float error = 0, previous_error = 0, integral = 0;

// Velocità base massima (ridotta per lentezza)
const int velocitaDestra = 65; // molto lento
int velocitaSinistra;

// Funzione per errore angolare corretto su 360°
float angleError(float target, float current) {
  float error = target - current;
  if (error > 180) error -= 360;
  if (error < -180) error += 360;
  return error;
}


bool cerchioCompletato = false;
float angoloIniziale = 0;
bool iniziato = false;

bool eseguiCerchio() {
  static float accumuloAngolo = 0;
  static float angoloPrecedente = 0;

  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
  float yaw = euler.x();

  if (!iniziato) {
    angoloIniziale = yaw;
    angoloPrecedente = yaw;
    accumuloAngolo = 0;
    iniziato = true;
  }

  float delta = angleError(yaw, angoloPrecedente);
  accumuloAngolo += delta;
  angoloPrecedente = yaw;

  // Calcolo PID
  float yawTarget = fmod((millis() / 60000.0) * 360.0, 360.0);
  float error = angleError(yawTarget, yaw);
  integral += error;
  float derivative = error - previous_error;
  previous_error = error;

  float output = Kp * error + Ki * integral + Kd * derivative;

  // Calcolo velocità PID corretta
  int leftSpeed = constrain(velocitaSinistra - output, 0, 255);
  int rightSpeed = constrain(velocitaDestra + output, 0, 255);

  // Motore A (sinistra)
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, HIGH);
  analogWrite(PWMA, leftSpeed);

  // Motore B (destra)
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, HIGH);
  analogWrite(PWMB, rightSpeed);

  Serial.print("AccAng: "); Serial.println(accumuloAngolo);

  // Verifica se ha completato ~360 gradi
  if (abs(accumuloAngolo) >= 360.0) {
    digitalWrite(PWMA, 0);
    digitalWrite(PWMB, 0);
    cerchioCompletato = true;
    return true;
  }

  return false;
}

float angoloTarget = 0;

void vaiAvantiConPID(int velocitaBase = 100) {
  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
  float yaw = euler.x();

  float errore = angleError(angoloTarget, yaw);
  integral += errore;
  float derivative = errore - previous_error;
  previous_error = errore;

  float output = Kp * errore + Ki * integral + Kd * derivative;

  int leftSpeed = constrain(velocitaBase - output, 0, 255);
  int rightSpeed = constrain(velocitaBase + output, 0, 255);

  // Motore A (sinistra)
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, HIGH);
  analogWrite(PWMA, leftSpeed);

  // Motore B (destra)
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, HIGH);
  analogWrite(PWMB, rightSpeed);
}

void vaiIndietroConPID(int velocitaBase = 100) {
  imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
  float yaw = euler.x();

  float errore = angleError(angoloTarget, yaw);
  integral += errore;
  float derivative = errore - previous_error;
  previous_error = errore;

  float output = Kp * errore + Ki * integral + Kd * derivative;

  int leftSpeed = constrain(velocitaBase - output, 0, 255);
  int rightSpeed = constrain(velocitaBase + output, 0, 255);

  // Motore A (sinistra)
  digitalWrite(AIN1, HIGH);
  digitalWrite(AIN2, LOW);
  analogWrite(PWMA, leftSpeed);

  // Motore B (destra)
  digitalWrite(BIN1, HIGH);
  digitalWrite(BIN2, LOW);
  analogWrite(PWMB, rightSpeed);
}

void setup() {
  Serial.begin(9600);
  if (!bno.begin()) {
    Serial.println("BNO055 non trovato");
    while (1);
  }
  bno.setExtCrystalUse(true);

  pinMode(AIN1, OUTPUT); pinMode(AIN2, OUTPUT); pinMode(PWMA, OUTPUT);
  pinMode(BIN1, OUTPUT); pinMode(BIN2, OUTPUT); pinMode(PWMB, OUTPUT);
  pinMode(STBY, OUTPUT); digitalWrite(STBY, HIGH);

  // Calcolo della velocità sinistra in base al raggio
  float ratio = (raggio_cerchio - distanzaRuote / 2) / (raggio_cerchio + distanzaRuote / 2);
  velocitaSinistra = velocitaDestra * ratio;
}

void loop() {
  if (!cerchioCompletato) {
    if (eseguiCerchio()) {
      Serial.println("Cerchio completato!");
      delay(1000);  // pausa
      // Fai qualcosa qui, es:
      // suona, cambia direzione, esegui un'altra funzione, ecc.
    }
  } else {
    // Azione successiva dopo il cerchio
    Serial.println("Sto eseguendo l'azione successiva...");
    /* Per esempio: muoversi avanti
    digitalWrite(AIN1, LOW);
    digitalWrite(AIN2, HIGH);
    analogWrite(PWMA, 100);

    digitalWrite(BIN1, LOW);
    digitalWrite(BIN2, HIGH);
    analogWrite(PWMB, 100);
    */
    vaiAvantiConPID(80);
    delay(2000);
    vaiIndietroConPID(80);
    delay(2000);
  }

  delay(100);
}