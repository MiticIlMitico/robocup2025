from hub import light_matrix, motion_sensor, port
import motor
import time
import runloop
import distance_sensor

# Costanti PID per la direzione
KP_FOR = 0.2# Costante di proporzionalitÃƒ 
KI_FOR = 0.0# Costante dell'integrale
KD_FOR = 0.02# Costante della derivata

# Costanti PID per la rotazione
KP_GYR = 0.4
KI_GYR = 0.0
KD_GYR = 0.0022

motion_sensor.reset_yaw(0)# Imposto l'angolo di imbardata attuale a 0

def apply_pid(target_angle, current_angle, last_error, integral, KP, KI, KD):
    error = target_angle - current_angle
    integral += error
    derivative = error - last_error
    correction = KP * error + KI * integral + KD * derivative
    return correction, integral

def dritto(v, temp):
    t = (temp * 500) / 27

    motion_sensor.reset_yaw(0)
    runloop.until(motion_sensor.stable)

    target_angle = 0
    integral = 0
    last_error = 0

    motor.reset_relative_position(port.C, 0)
    print(motor.relative_position(port.C))

    while True:
        current_angle = motion_sensor.tilt_angles()[0]
        correction, integral = apply_pid(target_angle, current_angle, last_error, integral, KP_FOR, KI_FOR, KD_FOR)
        last_error = current_angle

        l_speed = int(v - correction)
        r_speed = int(v + correction)

        motor.run(port.C, r_speed)
        motor.run(port.D, -l_speed)

        if motor.relative_position(port.C) > t:
            break

        time.sleep(0.1)

    motor.stop(port.C)
    motor.stop(port.D)

def turn(target_angle):
    motion_sensor.reset_yaw(0)
    time.sleep(0.2)
    runloop.until(motion_sensor.stable)

    current_angle = motion_sensor.tilt_angles()[0]
    integral = 0
    last_error = target_angle - current_angle

    while True:
        current_angle = motion_sensor.tilt_angles()[0]
        correction, integral = apply_pid(target_angle, current_angle, last_error, integral, KP_GYR, KI_GYR, KD_GYR)
        last_error = current_angle - target_angle

        l_speed = int(-correction)
        r_speed = int(correction)

        motor.run(port.C, r_speed)
        motor.run(port.D, -l_speed)

        if abs(target_angle - current_angle) < 10 and abs(l_speed) < 100 and abs(r_speed) < 100:
            break

    motor.stop(port.C)
    motor.stop(port.D)

async def main():
    action = False

    while True:
        if 0 < distance_sensor.distance(port.F) <= 100:
            action = True
            break

    if action:
        dritto(520, 330)
        time.sleep(0.5)
        turn(-900)
        dritto(520, 50)
        time.sleep(0.5)
        turn(-900)
        for _ in range(700):
            turn(1800)
            turn(-1800)


            

runloop.run(main())